{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\User Files\\\\Documents\\\\React App tutorial\\\\freecodecamp\\\\React-project-one\\\\my-app\\\\src\\\\index.js\";\n//----------------importing necessary files\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"; //custom imports (identical to books name)\n\nimport { booksArray } from \"./booksArray\"; //CSS\n\nimport \"./index.css\"; //stateless functional component\n//always return JSX\n// same thing can be done as but gets messy if im return alot:\n// const Greetings = () => {\n//   return React.createElement(\n//     \"div\",\n//     {},\n//     React.createElement(\"h1\", {}, \"Check me out, boy!\")\n//   );\n// };\n//-------------------Setting up vars{\n//-----------------mapping booksArray\n// const newBook = booksArray.map((book) => {\n//   console.log(book.author);\n//   // return <h3>{book.title}</h3>\n//   return <img src=\"{book.image}\" alt=\"\" />;\n// });\n//-------------------my first component\n\nfunction BookList() {\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"bookList\",\n    children: booksArray.map(newBook => {\n      return /*#__PURE__*/_jsxDEV(Book, { ...newBook\n      }, newBook.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_c = BookList;\n\nconst Book = ({\n  image,\n  title,\n  author\n}) => {\n  // console.log(props);\n  //or i can destruct the probs like this:\n  // const { title, author, image } = props;\n  //or destructor in fuction parameter like this\n  //Books = ({title, author, image, children}) => {...\n  // const { image, title, author } = props.newBook;\n  const clickHandler = e => {\n    // console.log(\" event:\", e.bubbles);\n    console.log(\"Book title is:\", title);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"book\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"book_cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n      className: \"author\",\n      children: author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        input: \"button\",\n        className: \"btn btn-buy\",\n        onClick: clickHandler,\n        children: \"Buy Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        input: \"button\",\n        className: \"btn btn-basket\",\n        onClick: clickHandler,\n        children: \"Basket +\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}; // --------------- functions\n\n\n_c2 = Book;\nReactDOM.render( /*#__PURE__*/_jsxDEV(BookList, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 82,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BookList\");\n$RefreshReg$(_c2, \"Book\");","map":{"version":3,"sources":["D:/User Files/Documents/React App tutorial/freecodecamp/React-project-one/my-app/src/index.js"],"names":["React","ReactDOM","booksArray","BookList","map","newBook","id","Book","image","title","author","clickHandler","e","console","log","render","document","getElementById"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;AAEA,SAASC,UAAT,QAA2B,cAA3B,C,CACA;;AACA,OAAO,aAAP,C,CAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASC,QAAT,GAAoB;AAClB,sBACE;AAAS,IAAA,SAAS,EAAC,UAAnB;AAAA,cACGD,UAAU,CAACE,GAAX,CAAgBC,OAAD,IAAa;AAC3B,0BAAO,QAAC,IAAD,OAA2BA;AAA3B,SAAWA,OAAO,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;KARQH,Q;;AAUT,MAAMI,IAAI,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAD,KAA8B;AACzC;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,KAA9B;AACD,GAHD;;AAKA,sBACE;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA,4BACE;AAAK,MAAA,GAAG,EAAED,KAAV;AAAiB,MAAA,GAAG,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA,gBAAwBC;AAAxB;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA,8BACE;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,SAAS,EAAC,aAAjC;AAA+C,QAAA,OAAO,EAAEC,YAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AACE,QAAA,KAAK,EAAC,QADR;AAEE,QAAA,SAAS,EAAC,gBAFZ;AAGE,QAAA,OAAO,EAAEA,YAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAhCD,C,CAkCA;;;MAlCMJ,I;AAoCNN,QAAQ,CAACc,MAAT,eAAgB,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA8BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA9B","sourcesContent":["//----------------importing necessary files\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n//custom imports (identical to books name)\n\nimport { booksArray } from \"./booksArray\";\n//CSS\nimport \"./index.css\";\n\n//stateless functional component\n//always return JSX\n\n// same thing can be done as but gets messy if im return alot:\n\n// const Greetings = () => {\n//   return React.createElement(\n//     \"div\",\n//     {},\n//     React.createElement(\"h1\", {}, \"Check me out, boy!\")\n//   );\n// };\n\n//-------------------Setting up vars{\n\n//-----------------mapping booksArray\n\n// const newBook = booksArray.map((book) => {\n//   console.log(book.author);\n//   // return <h3>{book.title}</h3>\n//   return <img src=\"{book.image}\" alt=\"\" />;\n// });\n\n//-------------------my first component\n\nfunction BookList() {\n  return (\n    <section className=\"bookList\">\n      {booksArray.map((newBook) => {\n        return <Book key={newBook.id} {...newBook}></Book>;\n      })}\n    </section>\n  );\n}\n\nconst Book = ({ image, title, author }) => {\n  // console.log(props);\n  //or i can destruct the probs like this:\n  // const { title, author, image } = props;\n  //or destructor in fuction parameter like this\n  //Books = ({title, author, image, children}) => {...\n  // const { image, title, author } = props.newBook;\n\n  const clickHandler = (e) => {\n    // console.log(\" event:\", e.bubbles);\n    console.log(\"Book title is:\", title);\n  };\n\n  return (\n    <article className=\"book\">\n      <img src={image} alt=\"book_cover\" />\n      <h3>{title}</h3>\n      <h6 className=\"author\">{author}</h6>\n      <span>\n        <button input=\"button\" className=\"btn btn-buy\" onClick={clickHandler}>\n          Buy Now\n        </button>\n        <button\n          input=\"button\"\n          className=\"btn btn-basket\"\n          onClick={clickHandler}\n        >\n          Basket +\n        </button>\n      </span>\n    </article>\n  );\n};\n\n// --------------- functions\n\nReactDOM.render(<BookList />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}